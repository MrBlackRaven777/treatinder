/*
 * Petfinder API
 * The Petfinder API allows you to access the Petfinder database of hundreds of thousands of pets ready for adoption and over ten thousand animal welfare organizations. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@petfinder.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.petfinder.client.api;

import com.petfinder.client.auth.OAuth;
import com.petfinder.client.model.OrganizationResponse;
import com.petfinder.client.model.OrganizationsResponse;
import com.petfinder.client.ApiCallback;
import com.petfinder.client.ApiClient;
import com.petfinder.client.ApiException;
import com.petfinder.client.ApiResponse;
import com.petfinder.client.Configuration;
import com.petfinder.client.Pair;
import com.petfinder.client.ProgressRequestBody;
import com.petfinder.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient apiClient;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public OrganizationApi(String accessToken) {
        this();
        OAuth oauth = (OAuth) apiClient.getAuthentication("oauth2");
        oauth.setAccessToken(accessToken);
    }

    public OrganizationApi(String apiKey, String secret) {
        this();
        OAuth oauth = (OAuth) apiClient.getAuthentication("oauth2");
        oauth.setApiKey(apiKey);
        oauth.setSecret(secret);
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for organizationsList
     * @param name Filter results matching organization name (optional)
     * @param location Filter results by location (_postal code_, _city/state_, or _lat/long_) (optional)
     * @param distance Filter results by distance from given location (optional)
     * @param country Filter results by country (optional)
     * @param state Filter results by state (optional)
     * @param query Search on _name_, _city_, _state_; Fuzzy search that includes synonyms, punctuation, etc. (optional)
     * @param sort Sort results by field (optional)
     * @param limit Number of results to return (optional, default to 20)
     * @param page Page of results to return (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationsListCall(String name, String location, Integer distance, String country, String state, String query, String sort, Integer limit, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("distance", distance));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationsListValidateBeforeCall(String name, String location, Integer distance, String country, String state, String query, String sort, Integer limit, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = organizationsListCall(name, location, distance, country, state, query, sort, limit, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Organizations
     * 
     * @param name Filter results matching organization name (optional)
     * @param location Filter results by location (_postal code_, _city/state_, or _lat/long_) (optional)
     * @param distance Filter results by distance from given location (optional)
     * @param country Filter results by country (optional)
     * @param state Filter results by state (optional)
     * @param query Search on _name_, _city_, _state_; Fuzzy search that includes synonyms, punctuation, etc. (optional)
     * @param sort Sort results by field (optional)
     * @param limit Number of results to return (optional, default to 20)
     * @param page Page of results to return (optional, default to 1)
     * @return OrganizationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganizationsResponse organizationsList(String name, String location, Integer distance, String country, String state, String query, String sort, Integer limit, Integer page) throws ApiException {
        ApiResponse<OrganizationsResponse> resp = organizationsListWithHttpInfo(name, location, distance, country, state, query, sort, limit, page);
        return resp.getData();
    }

    /**
     * Get Organizations
     * 
     * @param name Filter results matching organization name (optional)
     * @param location Filter results by location (_postal code_, _city/state_, or _lat/long_) (optional)
     * @param distance Filter results by distance from given location (optional)
     * @param country Filter results by country (optional)
     * @param state Filter results by state (optional)
     * @param query Search on _name_, _city_, _state_; Fuzzy search that includes synonyms, punctuation, etc. (optional)
     * @param sort Sort results by field (optional)
     * @param limit Number of results to return (optional, default to 20)
     * @param page Page of results to return (optional, default to 1)
     * @return ApiResponse&lt;OrganizationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganizationsResponse> organizationsListWithHttpInfo(String name, String location, Integer distance, String country, String state, String query, String sort, Integer limit, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = organizationsListValidateBeforeCall(name, location, distance, country, state, query, sort, limit, page, null, null);
        Type localVarReturnType = new TypeToken<OrganizationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Organizations (asynchronously)
     * 
     * @param name Filter results matching organization name (optional)
     * @param location Filter results by location (_postal code_, _city/state_, or _lat/long_) (optional)
     * @param distance Filter results by distance from given location (optional)
     * @param country Filter results by country (optional)
     * @param state Filter results by state (optional)
     * @param query Search on _name_, _city_, _state_; Fuzzy search that includes synonyms, punctuation, etc. (optional)
     * @param sort Sort results by field (optional)
     * @param limit Number of results to return (optional, default to 20)
     * @param page Page of results to return (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationsListAsync(String name, String location, Integer distance, String country, String state, String query, String sort, Integer limit, Integer page, final ApiCallback<OrganizationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationsListValidateBeforeCall(name, location, distance, country, state, query, sort, limit, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganizationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationsShow
     * @param id Organization ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationsShowCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationsShowValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organizationsShow(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationsShowCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Organization
     * 
     * @param id Organization ID (required)
     * @return OrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganizationResponse organizationsShow(String id) throws ApiException {
        ApiResponse<OrganizationResponse> resp = organizationsShowWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Organization
     * 
     * @param id Organization ID (required)
     * @return ApiResponse&lt;OrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganizationResponse> organizationsShowWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = organizationsShowValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Organization (asynchronously)
     * 
     * @param id Organization ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationsShowAsync(String id, final ApiCallback<OrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationsShowValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
